// src/services/users/getUserInfo.ts
"use server"
import { cache } from "react"
import { createClient } from "@/utils/supabase/server"
import type { UserInfo } from "@/types/user"
import { jwtDecode } from "jwt-decode"
import { getUser, setUser, removeUser } from "./lru-cache"

export interface GetUserInfoOptions {
  /**
   * cache = true (par d√©faut) : utiliser le cache LRU si disponible
   * cache = false : ignorer compl√®tement le cache LRU (lecture et √©criture)
   */
  cache?: boolean
  
  /**
   * refresh = true : forcer la r√©cup√©ration des donn√©es fra√Æches et mettre √† jour le cache
   * refresh = false (d√©faut) : utiliser le cache si disponible
   * 
   * Note: si cache = false, cette option est ignor√©e
   */
  refresh?: boolean
}

/**
 * R√©cup√®re les informations utilisateur depuis Supabase Auth
 * Toujours √† jour mais plus lent qu'une lecture du cache LRU
 * 
 * G√®re silencieusement les erreurs d'authentification (utilisateurs d√©connect√©s)
 */
const fetchUserFromSupabase = cache(async (): Promise<Partial<UserInfo> | null> => {
  try {
    const supabase = await createClient()
    
    const { data: { user }, error } = await supabase.auth.getUser()
    
    // Ignorer silencieusement les erreurs d'auth (token invalide, expir√©, etc.)
    if (error) {
      // Log uniquement en dev si ce n'est pas une erreur blocante
      // if (process.env.NODE_ENV === 'development' && error.status !== 400) {
      //   console.warn('[getUserInfo] Supabase auth error:', error.message)
      // }
      return null
    }
    
    if (!user) return null

    const userMetadata = user.user_metadata || {}
    
    return {
      id: user.id,
      email: user.email,
      role: userMetadata.role || "GUEST",
      nom: userMetadata.nom,
      prenom: userMetadata.prenom,
      avatar_url: userMetadata.avatar_url || "/avatar.png",
      telephone: userMetadata.telephone,
      function: userMetadata.function || "GUEST",
      hopital: userMetadata.hopital,
      hopitaux: userMetadata.hopitaux,
      
      // Informations sp√©cifiques aux r√¥les
      medecin: userMetadata.medecin,
      patient: userMetadata.patient,
      
      invited_by: userMetadata.invited_by,
      status: userMetadata.status || "ACTIF",
      invitationToken: userMetadata.invitationToken,
      invitationType: userMetadata.invitationType,
      
      email_verified: userMetadata.email_verified || false,
      phone_verified: userMetadata.phone_verified || false,
    }
  } catch (error) { // <-- AJOUT DE CETTE LIGNE MANQUANTE
    // Gestion des erreurs inattendues
    if (process.env.NODE_ENV === 'development') {
      console.warn('[getUserInfo] Unexpected error in fetchUserFromSupabase:', error)
    }
    return null
  }
})

/**
 * R√©cup√®re l'ID utilisateur depuis la session
 * D√©dupliqu√© automatiquement par React Cache durant le m√™me render
 * 
 * Retourne null silencieusement si pas de session (utilisateur d√©connect√©)
 */
const getUserId = cache(async (): Promise<string | null> => {
  try {
    const supabase = await createClient()
    const { data: { session }, error } = await supabase.auth.getSession()
    
    // Pas de session = utilisateur d√©connect√© (normal)
    if (error || !session?.access_token) return null

    const token: any = jwtDecode(session.access_token)
    return token.sub
  } catch (error) {
    // Erreur de d√©codage JWT ou autre
    if (process.env.NODE_ENV === 'development') {
      console.warn('[getUserInfo] Error getting user ID:', error)
    }
    return null
  }
})

/**
 * Impl√©mentation interne de getUserInfo (non cach√©e par React)
 * Permet de g√©rer les options cache et refresh correctement
 */
async function getUserInfoInternal(
  options: GetUserInfoOptions = {}
): Promise<Partial<UserInfo> | null> {
  const { cache = true, refresh = false } = options
  
  // R√©cup√©rer l'ID utilisateur (d√©dupliqu√© par React Cache)
  const userId = await getUserId()
  if (!userId) return null

  // CAS 1: Cache LRU d√©sactiv√© - aller directement √† Supabase
  if (!cache) {
    return await fetchUserFromSupabase()
  }

  // CAS 2: Refresh forc√© - r√©cup√©rer les donn√©es fra√Æches et mettre √† jour le cache LRU
  if (refresh) {
    const freshUserInfo = await fetchUserFromSupabase()
    
    if (freshUserInfo) {
      // Mettre √† jour le cache LRU avec les nouvelles donn√©es
      setUser(userId, freshUserInfo)
    } else {
      // Si Supabase retourne null, invalider le cache LRU
      removeUser(userId)
    }
    
    return freshUserInfo
  }

  // CAS 3: Utilisation normale du cache LRU (mode par d√©faut - ULTRA RAPIDE ‚ö°)
  const cached = getUser(userId)
  if (cached) {
    return cached
  }

  // Cache miss - r√©cup√©rer depuis Supabase et mettre en cache LRU
  const userInfo = await fetchUserFromSupabase()
  if (userInfo) {
    setUser(userId, userInfo)
  }
  
  return userInfo
}

/**
 * R√©cup√®re les informations utilisateur avec double cache strat√©gique :
 * 
 * üî• NIVEAU 1 - React Cache (Request-level)
 *    D√©duplique les appels durant le m√™me render/request
 *    Si Header.tsx + Sidebar.tsx appellent getUserInfo(), 
 *    seul 1 appel sera r√©ellement ex√©cut√©
 * 
 * ‚ö° NIVEAU 2 - LRU Cache (Cross-request)
 *    Stocke les donn√©es entre les requ√™tes (10 min TTL)
 *    √âvite les appels r√©p√©t√©s √† Supabase
 * 
 * Performance:
 * - M√™me composant appel√© 10x dans 1 render = 1 seule ex√©cution
 * - Requ√™tes diff√©rentes dans les 10min = lecture LRU O(1)
 * - Apr√®s 10min = 1 appel Supabase puis cache LRU
 * 
 * @param options - Options de contr√¥le du cache
 * @returns Les informations utilisateur ou null
 * 
 * @example
 * ```typescript
 * // Utilisation par d√©faut (double cache) - ULTRA RAPIDE ‚ö°‚ö°
 * const user = await getUserInfo()
 * 
 * // Forcer le refresh du cache LRU
 * const freshUser = await getUserInfo({ refresh: true })
 * 
 * // Ignorer le cache LRU (React Cache actif quand m√™me)
 * const directUser = await getUserInfo({ cache: false })
 * ```
 */
export const getUserInfo = cache(getUserInfoInternal)

/**
 * Alias pour l'utilisation par d√©faut avec double cache
 * 
 * @example
 * ```typescript
 * // Dans ton middleware ou layout
 * const user = await getUserInfoCached()
 * ```
 */
export async function getUserInfoCached(): Promise<Partial<UserInfo> | null> {
  return getUserInfo({ cache: true, refresh: false })
}

/**
 * R√©cup√®re les donn√©es directement depuis Supabase (bypass cache LRU)
 * ‚ö†Ô∏è React Cache reste actif pour d√©dupliquer durant le m√™me render
 * 
 * @example
 * ```typescript
 * // Pour des v√©rifications critiques
 * const user = await getUserInfoDirect()
 * ```
 */
export async function getUserInfoDirect(): Promise<Partial<UserInfo> | null> {
  return getUserInfo({ cache: false })
}

/**
 * Force le refresh du cache LRU avec les derni√®res donn√©es
 * React Cache √©vite les appels multiples durant le m√™me render
 * 
 * @example
 * ```typescript
 * // Apr√®s une mise √† jour de profil
 * await updateUserProfile(...)
 * const user = await getUserInfoRefresh()
 * ```
 */
export async function getUserInfoRefresh(): Promise<Partial<UserInfo> | null> {
  return getUserInfo({ cache: true, refresh: true })
}