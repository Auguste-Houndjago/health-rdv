  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  }


  /// =========================
  /// ðŸ“Œ Utilisateur global
  /// =========================
  model Utilisateur {
    id                  String               @id @default(uuid())
    nom                 String
    prenom              String?
    email               String               @unique
    telephone           String?
    avatarUrl          String?
    dateNaissance       DateTime?
    role                Role                  @default(PATIENT)
    status              StatusUtilisateur    @default(ACTIF)
    administrateur      Administrateur?
    medecin             Medecin?
    patient             Patient?
    rendezVous          RendezVous[]
    utilisateurHopitals UtilisateurHopital[]
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    deletedAt         DateTime?
  }

  /// =========================
  /// ðŸ“Œ Administrateur
  /// =========================
  model Administrateur {
    id          String        @id @default(uuid())
    fonction    FonctionAdmin @default(RESPONSABLE)
    userId      String        @unique
    utilisateur Utilisateur   @relation(fields: [userId], references: [id], onDelete: Cascade)
  }

  /// =========================
  /// ðŸ“Œ Patient
  /// =========================
  model Patient {
    id            String        @id @default(uuid())
    adresse       String?
    groupeSanguin GroupeSanguin @default(INCONNU)
    poids         Float?
    taille        Float?
    sexe          Sexe          @default(Homme)
    userId        String        @unique
    documents     Document[]
    utilisateur   Utilisateur   @relation(fields: [userId], references: [id], onDelete: Cascade)
    rendezVous    RendezVous[]
  }

  /// =========================
  /// ðŸ“Œ Medecin
  /// =========================
  model Medecin {
    id              String           @id @default(uuid())
    specialiteId    String
    numLicence      String           @unique
    anneeExperience Int?
    titre           String
    userId          String           @unique
    isDisponible    Boolean          @default(true)
    statut          StatutApproval   @default(EN_ATTENTE)
    specialite      Specialite       @relation(fields: [specialiteId], references: [id])
    utilisateur     Utilisateur      @relation(fields: [userId], references: [id], onDelete: Cascade)
    recommandations Recommandation[]
    rendezVous      RendezVous[]
    hopitaux        MedecinHopital[]
    demandes        DemandeHopital[]
  }

  /// =========================
  /// ðŸ“Œ Document
  /// =========================
  model Document {
    id           String   @id @default(uuid())
    titre        String
    description  String?
    dateCreation DateTime @default(now())
    patientId    String?
    url          String
    patient      Patient? @relation(fields: [patientId], references: [id], onDelete: Cascade)
    recommandations Recommandation[]
  }

  /// =========================
  /// ðŸ“Œ RendezVous
  /// =========================
  model RendezVous {
    id            String           @id @default(uuid())
    date          DateTime
    duree         Int              @default(30)
    statut        StatutRendezVous @default(EN_ATTENTE)
    motif         String?
    hopitalId     String
    utilisateurId String
    medecinId     String
    patientId     String
    medecin       Medecin          @relation(fields: [medecinId], references: [id])
    patient       Patient          @relation(fields: [patientId], references: [id])
    utilisateur   Utilisateur      @relation(fields: [utilisateurId], references: [id])
    hopital       Hopital          @relation(fields: [hopitalId], references: [id])

    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt

    @@unique([medecinId, date])
    @@unique([patientId, date])
    @@index([medecinId,date])
    @@index([patientId,date])
  }

  /// =========================
  /// ðŸ“Œ Hopital
  /// =========================
  model Hopital {
    id                  String               @id @default(uuid())
    nom                 String
    adresse             String
    description         String?
    image               String?
    url                 String?
    contact             String
    localisation        String?
    slug                String?              @unique
    fuseauHoraire       String               @default("Europe/Paris")
    utilisateurHopitals UtilisateurHopital[]
    rendevous           RendezVous[]
    medecin             MedecinHopital[]
    specialites         Specialite[]
    demandes            DemandeHopital[]
  }

  model MedecinHopital {
    id        String   @id @default(uuid())
    medecinId String
    hopitalId String
    medecin   Medecin  @relation(fields: [medecinId], references: [id], onDelete: Cascade)
    hopital   Hopital  @relation(fields: [hopitalId], references: [id], onDelete: Cascade)
    
    @@unique([medecinId, hopitalId])
  }

  /// =========================
  /// ðŸ“Œ Specialite
  /// =========================
  model Specialite {
    id          String    @id @default(uuid())
    nom         String
    image       String?
    description String?

    medecins    Medecin[]
    hopitaux    Hopital[]

    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
  }

  /// =========================
  /// ðŸ“Œ Recommandation
  /// =========================
  model Recommandation {
    id        String   @id @default(uuid())
    contenu   String
    file      String?
    documentId  String?   
    medecinId String
    date      DateTime @default(now())
    medecin   Medecin  @relation(fields: [medecinId], references: [id], onDelete: Cascade)
    document    Document?  @relation(fields: [documentId], references: [id], onDelete: SetNull)
  }

  /// =========================
  /// ðŸ“Œ UtilisateurHopital
  /// =========================
  model UtilisateurHopital {
    id            String      @id @default(uuid())
    utilisateurId String
    hopitalId     String
    dateDebut     DateTime    @default(now())
    dateFin       DateTime?
    hopital       Hopital     @relation(fields: [hopitalId], references: [id], onDelete: Cascade)
    utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)

    @@unique([utilisateurId, hopitalId])
  }

  /// =========================
  /// ðŸ“Œ DemandeHopital
  /// =========================
  model DemandeHopital {
    id            String           @id @default(uuid())
    medecinId     String
    hopitalId     String
    statut        StatutDemande    @default(EN_ATTENTE)
    message       String?
    dateDemande   DateTime         @default(now())
    dateReponse   DateTime?
    reponse       String?
    medecin       Medecin          @relation(fields: [medecinId], references: [id], onDelete: Cascade)
    hopital       Hopital          @relation(fields: [hopitalId], references: [id], onDelete: Cascade)
    
    createdAt     DateTime         @default(now())
    updatedAt     DateTime         @updatedAt

    @@unique([medecinId, hopitalId])
    @@index([medecinId])
    @@index([hopitalId])
    @@index([statut])
  }

  /// =========================
  /// ðŸ“Œ EnumÃ©rations
  /// =========================
  enum Role {
    PATIENT 
    MEDECIN 
    ADMIN
  }

  enum FonctionAdmin {
    RESPONSABLE
    SUPER_ADMIN
  }

  enum Sexe {
    Homme
    Femme
    Autre
  }

  enum GroupeSanguin {
    A_POSITIF
    A_NEGATIF
    B_POSITIF
    B_NEGATIF
    AB_POSITIF
    AB_NEGATIF
    O_POSITIF
    O_NEGATIF
    INCONNU
  }

  enum StatutRendezVous {
    CONFIRME
    ANNULE
    EN_ATTENTE
    TERMINE
  }

  enum StatusUtilisateur {
    ACTIF
    INACTIF
    PENDING
  }

  enum StatutApproval {
    EN_ATTENTE
    APPROUVE
    REJETE
  }

  enum StatutDemande {
    EN_ATTENTE
    APPROUVE
    REJETE
  }