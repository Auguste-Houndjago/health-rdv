import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  // ‚ö° Next.js + TypeScript de base
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    // üîπ Fichiers ignor√©s
    ignores: [
      "node_modules/**",
      ".next/**",
      "out/**",
      "build/**",
      "next-env.d.ts",
    ],
  },
  {
    rules: {
      // -------------------------------
      // üîπ TypeScript strict
      // -------------------------------
      "@typescript-eslint/ban-ts-comment": "warn", // √©vite d‚Äôabuser de // @ts-ignore
      "@typescript-eslint/ban-types": "warn", // √©vite certains types interdits (ex: {}
      "@typescript-eslint/consistent-type-definitions": ["warn", "interface"], // pr√©f√®re "interface" √† "type"
      "@typescript-eslint/explicit-function-return-type": "warn", // forcer le retour typ√© des fonctions
      "@typescript-eslint/explicit-module-boundary-types": "warn", // type de retour explicite pour exports publics
      "@typescript-eslint/no-explicit-any": "warn", // avertit si tu utilises "any"
      "@typescript-eslint/no-inferrable-types": "warn", // √©vite d‚Äô√©crire "let x: number = 1"
      "@typescript-eslint/no-non-null-assertion": "warn", // √©vite "!" partout
      "@typescript-eslint/no-non-null-asserted-optional-chain": "warn", // √©vite "?.!"
      "@typescript-eslint/no-unused-vars": ["warn", { argsIgnorePattern: "^_" }], // avertit si variable non utilis√©e
      "@typescript-eslint/prefer-as-const": "warn", // pr√©f√®re const assertions ‚Üí "as const"
      "@typescript-eslint/prefer-optional-chain": "warn", // pr√©f√®re ?. au lieu des longs if
      "@typescript-eslint/prefer-nullish-coalescing": "warn", // pr√©f√®re ?? √† ||

      // -------------------------------
      // üîπ Bonnes pratiques JS
      // -------------------------------
      "array-callback-return": "warn", // forcer return dans map/filter
      "default-case": "warn", // forcer un default dans switch
      "eqeqeq": ["warn", "always"], // toujours utiliser ===
      "no-alert": "warn", // d√©conseille alert()
      "no-console": "warn", // √©vite les console.log
      "no-debugger": "warn", // √©vite debugger
      "no-empty-function": "warn", // √©vite les fonctions vides
      "no-eval": "warn", // interdit eval()
      "no-extend-native": "warn", // interdit d‚Äôajouter des m√©thodes aux objets natifs
      "no-implied-eval": "warn", // interdit setTimeout("string")
      "no-multi-spaces": "warn", // pas d‚Äôespaces multiples
      "no-new-func": "warn", // interdit Function("...") dynamique
      "no-param-reassign": "warn", // √©vite de r√©assigner les param√®tres de fonction
      "no-return-assign": "warn", // interdit les return x = y
      "no-sequences": "warn", // interdit "," dans les expressions
      "no-shadow": "warn", // √©vite de red√©finir une variable dans une port√©e
      "no-throw-literal": "warn", // interdit throw "string"
      "no-unused-expressions": "warn", // interdit les expressions inutiles (ex: a && b)
      "no-useless-concat": "warn", // √©vite les concat inutiles
      "no-useless-return": "warn", // return inutiles
      "prefer-const": "warn", // pr√©f√®re const si pas de r√©assignation
      "prefer-template": "warn", // pr√©f√®re les template strings `${}` √† +
      "require-await": "warn", // interdit async sans await

      // -------------------------------
      // üîπ Style / formatage
      // -------------------------------
      "semi": ["warn", "always"], // points-virgules obligatoires
      "quotes": ["warn", "double", { avoidEscape: true }], // utiliser guillemets doubles
      "indent": ["warn", 2, { SwitchCase: 1 }], // indentation √† 2 espaces
      "comma-dangle": ["warn", "always-multiline"], // virgule finale sur les objets/arrays multilignes
      "object-curly-spacing": ["warn", "always"], // espace entre { }
      "array-bracket-spacing": ["warn", "never"], // pas d‚Äôespace [ ]
      "space-before-blocks": "warn", // espace avant {
      "keyword-spacing": ["warn", { before: true, after: true }], // espace autour des mots-cl√©s
      "no-trailing-spaces": "warn", // pas d‚Äôespace en fin de ligne
      "eol-last": ["warn", "always"], // toujours une ligne vide en fin de fichier
      "max-len": ["warn", { code: 100, ignoreUrls: true }], // limite 100 caract√®res par ligne

      // -------------------------------
      // üîπ React
      // -------------------------------
      "react/jsx-boolean-value": ["warn", "never"], // <Component disabled /> au lieu de disabled={true}
      "react/jsx-key": "warn", // cl√© obligatoire dans les listes
      "react/jsx-no-duplicate-props": "warn", // pas de props dupliqu√©es
      "react/jsx-no-undef": "warn", // interdit JSX avec variable non d√©finie
      "react/jsx-uses-react": "warn", // pour JSX avec React
      "react/jsx-uses-vars": "warn", // √©vite que JSX soit consid√©r√© comme unused
      "react/no-children-prop": "warn", // interdit d‚Äôutiliser children comme prop
      "react/no-danger": "warn", // √©vite dangerouslySetInnerHTML
      "react/no-deprecated": "warn", // avertit si tu utilises des API React obsol√®tes
      "react/no-direct-mutation-state": "warn", // interdit de modifier state directement
      "react/no-unescaped-entities": "warn", // interdit caract√®res bruts dans JSX
      "react/no-unknown-property": "warn", // interdit props inconnues dans JSX
      "react/react-in-jsx-scope": "warn", // React doit √™tre import√© si JSX (sauf Next)

      // -------------------------------
      // üîπ React Hooks
      // -------------------------------
      "react-hooks/rules-of-hooks": "warn", // r√®gles de hooks (useState/useEffect)
      "react-hooks/exhaustive-deps": "warn", // d√©pendances manquantes dans useEffect

      // -------------------------------
      // üîπ Next.js sp√©cifiques
      // -------------------------------
      "@next/next/no-img-element": "warn", // pr√©f√®re <Image> √† <img>
      "@next/next/no-document-import-in-page": "warn", // interdit _document.tsx dans pages/
      "@next/next/no-head-element": "warn", // interdit <head> ‚Üí utilise next/head
      "@next/next/no-script-in-head": "warn", // interdit <script> dans <Head>
      "@next/next/no-sync-scripts": "warn", // interdit scripts bloquants
      "@next/next/google-font-display": "warn", // bonne config Google Fonts
      "@next/next/google-font-preconnect": "warn", // performance fonts
    },
  },
];

export default eslintConfig;
