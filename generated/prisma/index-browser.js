
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UtilisateurScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  email: 'email',
  telephone: 'telephone',
  dateCreation: 'dateCreation',
  status: 'status'
};

exports.Prisma.AdministrateurScalarFieldEnum = {
  id: 'id',
  fonction: 'fonction',
  userId: 'userId'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  dateNaissance: 'dateNaissance',
  adresse: 'adresse',
  groupeSanguin: 'groupeSanguin',
  poids: 'poids',
  taille: 'taille',
  sexe: 'sexe',
  userId: 'userId'
};

exports.Prisma.MedecinScalarFieldEnum = {
  id: 'id',
  specialiteId: 'specialiteId',
  numLicence: 'numLicence',
  anneeExperience: 'anneeExperience',
  titre: 'titre',
  userId: 'userId',
  isDisponible: 'isDisponible',
  statut: 'statut'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  titre: 'titre',
  description: 'description',
  dateCreation: 'dateCreation',
  patientId: 'patientId',
  url: 'url'
};

exports.Prisma.RendezVousScalarFieldEnum = {
  id: 'id',
  date: 'date',
  duree: 'duree',
  statut: 'statut',
  motif: 'motif',
  hopitalId: 'hopitalId',
  utilisateurId: 'utilisateurId',
  medecinId: 'medecinId',
  patientId: 'patientId'
};

exports.Prisma.HopitalScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  adresse: 'adresse',
  description: 'description',
  contact: 'contact',
  localisation: 'localisation',
  slug: 'slug',
  fuseauHoraire: 'fuseauHoraire'
};

exports.Prisma.MedecinHopitalScalarFieldEnum = {
  id: 'id',
  medecinId: 'medecinId',
  hopitalId: 'hopitalId'
};

exports.Prisma.SpecialiteScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  description: 'description'
};

exports.Prisma.RecommandationScalarFieldEnum = {
  id: 'id',
  contenu: 'contenu',
  medecinId: 'medecinId',
  date: 'date'
};

exports.Prisma.UtilisateurHopitalScalarFieldEnum = {
  id: 'id',
  utilisateurId: 'utilisateurId',
  hopitalId: 'hopitalId',
  role: 'role',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.StatusUtilisateur = exports.$Enums.StatusUtilisateur = {
  ACTIF: 'ACTIF',
  INACTIF: 'INACTIF'
};

exports.FonctionAdmin = exports.$Enums.FonctionAdmin = {
  gestionnaire: 'gestionnaire',
  super_admin: 'super_admin'
};

exports.GroupeSanguin = exports.$Enums.GroupeSanguin = {
  A_POSITIF: 'A_POSITIF',
  A_NEGATIF: 'A_NEGATIF',
  B_POSITIF: 'B_POSITIF',
  B_NEGATIF: 'B_NEGATIF',
  AB_POSITIF: 'AB_POSITIF',
  AB_NEGATIF: 'AB_NEGATIF',
  O_POSITIF: 'O_POSITIF',
  O_NEGATIF: 'O_NEGATIF',
  INCONNU: 'INCONNU'
};

exports.Sexe = exports.$Enums.Sexe = {
  Homme: 'Homme',
  Femme: 'Femme',
  Autre: 'Autre'
};

exports.StatutApproval = exports.$Enums.StatutApproval = {
  EN_ATTENTE: 'EN_ATTENTE',
  APPROUVE: 'APPROUVE',
  REJETE: 'REJETE'
};

exports.StatutRendezVous = exports.$Enums.StatutRendezVous = {
  CONFIRME: 'CONFIRME',
  ANNULE: 'ANNULE',
  EN_ATTENTE: 'EN_ATTENTE',
  TERMINE: 'TERMINE'
};

exports.Role = exports.$Enums.Role = {
  patient: 'patient',
  medecin: 'medecin',
  admin: 'admin'
};

exports.Prisma.ModelName = {
  Utilisateur: 'Utilisateur',
  Administrateur: 'Administrateur',
  Patient: 'Patient',
  Medecin: 'Medecin',
  Document: 'Document',
  RendezVous: 'RendezVous',
  Hopital: 'Hopital',
  MedecinHopital: 'MedecinHopital',
  Specialite: 'Specialite',
  Recommandation: 'Recommandation',
  UtilisateurHopital: 'UtilisateurHopital'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
